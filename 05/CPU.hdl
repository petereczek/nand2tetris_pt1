// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=isLoadInst);

    Mux16(a=instruction, b=outALU, sel=instruction[15], out=instMuxOut);
    //Logic for loading A register
    //If instruction type 0 (constant) or (type 1 and destination bit for A reg set), load A register)
    And(a=instruction[5], b=instruction[15], out=compInstAndLoadA);
    Or(a=compInstAndLoadA, b=isLoadInst, out=loadA);
    ARegister(in=instMuxOut, load=loadA, out=outRegA, out[0..14]=addressM);


    Mux16(a=outRegA, b=inM, sel=instruction[12], out=outAMMux);
    //logic for jumps (loading a new val to PC) - last bit is 15
    And(a=instruction[2], b=ngALU, out=outJOne);
    And(a=instruction[1], b=zrALU, out=outJTwo);
    Or(a=ngALU, b=zrALU, out=ngOrZr);
    Not(in=ngOrZr, out=notNgNotZr);
    And(a=instruction[0], b=notNgNotZr, out=outJThree);
    Or(a=outJOne, b=outJTwo, out=jOneOrJTwo);
    Or(a=jOneOrJTwo, b=outJThree, out=jumpOut);
    //Only jump on comp instructions
    And(a=jumpOut, b=instruction[15], out=jumpOutFin);
    Not(in=jumpOutFin, out=notJumpOut);
    PC(in=outRegA, load=jumpOutFin, inc=notJumpOut, reset=reset, out[0..14]=pc);
    //Logic for loading D register
    //If instruction type 1 and destination bit for D reg set, load D register)
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=outALU, load=loadD, out=outRegD);
    //ALU
    ALU(x=outRegD, y=outAMMux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zrALU, ng=ngALU);
    //Hacky way to set writeM to one of the instruction bits
    Not(in=instruction[3], out=notWriteM);
    Not(in=notWriteM, out=writeToM);
    //Only write M on compute (1) instructions
    And(a=writeToM, b=instruction[15], out=writeM);
    
    
}
